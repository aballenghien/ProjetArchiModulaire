/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package appli;

import appli.data.Banque;
import appli.data.Client;
import appli.data.Compte;
import appli.data.IAfficheur;
import appli.data.IDescription;
import appli.data.IModifCompte;
import appli.data.Operation;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import plateforme.Loader;

/**
 *
 * @author Audrey
 */
public class JFrameBanque extends javax.swing.JFrame {

    private Client client;
    private ArrayList<IDescription> listAfficheurPlugins;
    private ArrayList<IDescription> listModifieurPlugins;

    /**
     * Creates new form JFrameBanque2
     */
    public JFrameBanque() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrameOperations = new javax.swing.JFrame();
        jLabelNomClient = new javax.swing.JLabel();
        jLabelNumCompte = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableOperations = new javax.swing.JTable();
        jButtonRetour = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClient = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCompte = new javax.swing.JTable();
        jLabelClient = new javax.swing.JLabel();
        jLabelCompte = new javax.swing.JLabel();
        jLabelMontant = new javax.swing.JLabel();
        jTextFieldMontant = new javax.swing.JTextField();
        jButtonOperations = new javax.swing.JButton();
        jButtonValider = new javax.swing.JButton();

        jFrameOperations.setMinimumSize(new java.awt.Dimension(741, 465));

        jLabelNomClient.setText("Nom Client");

        jLabelNumCompte.setText("Numéro de compte");

        jTableOperations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTableOperations);

        jButtonRetour.setText("Retour");
        jButtonRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetourActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrameOperationsLayout = new javax.swing.GroupLayout(jFrameOperations.getContentPane());
        jFrameOperations.getContentPane().setLayout(jFrameOperationsLayout);
        jFrameOperationsLayout.setHorizontalGroup(
            jFrameOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameOperationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameOperationsLayout.createSequentialGroup()
                        .addComponent(jLabelNomClient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelNumCompte))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameOperationsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonRetour)))
                .addContainerGap())
        );
        jFrameOperationsLayout.setVerticalGroup(
            jFrameOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameOperationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomClient)
                    .addComponent(jLabelNumCompte))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonRetour)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ma Banque");

        jTableClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableClient);

        jTableCompte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableCompte);

        jLabelClient.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelClient.setText("Liste des clients : ");

        jLabelCompte.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCompte.setText("Liste des comptes : ");

        jLabelMontant.setText("Montant : ");

        jButtonOperations.setText("Opérations");
        jButtonOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOperationsActionPerformed(evt);
            }
        });

        jButtonValider.setText("Valider");
        jButtonValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValiderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelClient)
                            .addComponent(jLabelCompte))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelMontant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMontant)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonValider)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOperations)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelClient)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelCompte)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMontant)
                    .addComponent(jTextFieldMontant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOperations)
                    .addComponent(jButtonValider))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValiderActionPerformed
        effectuerOperation();
    }//GEN-LAST:event_jButtonValiderActionPerformed

    private void jButtonOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOperationsActionPerformed
        afficherOperation();
    }//GEN-LAST:event_jButtonOperationsActionPerformed

    private void jButtonRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetourActionPerformed
        jFrameOperations.setVisible(false);
    }//GEN-LAST:event_jButtonRetourActionPerformed

    /**
     * Fonction faisant appel au plugins de modification du compte afin de
     * soustraire ou d'ajouter une somme au solde du compte sélectionné
     */
    public void effectuerOperation() {
        //Charge le plugins crediterCompte à parti de se description
        IModifCompte modifCrediter = (IModifCompte) Loader.getInstance().getPlugin(this.getListModifieurPlugins().get(0));
        //Charge le plugons debiterCompte  partir de la description
        IModifCompte modifdebiter = (IModifCompte) Loader.getInstance().getPlugin(this.getListModifieurPlugins().get(1));
        //Recherche le compte sélectionné parmi les comptes du client sélectionné
        if (jTableCompte.getSelectedRow() >= 0) {
            Compte c = this.getClient().chercherCompte(Integer.parseInt(jTableCompte.getValueAt(jTableCompte.getSelectedRow(), 0).toString()));
            if (c != null) {
                // récupère le montant
                String text = jTextFieldMontant.getText();
                float montant = 0;
                if (text.length() > 0) {
                    montant = Float.valueOf(text);
                }
                boolean operationEffectuee = false;
                //Si le montant est positif, on fait appel au plugns crediterCompte
                if (montant > 0) {
                    operationEffectuee = modifCrediter.modifier(c, montant);

                    //S'il est négatif, on fait appel au plugins debiterCompte
                } else if (montant < 0) {
                    montant = Math.abs(montant);
                    operationEffectuee = modifdebiter.modifier(c, montant);
                }
                //On affiche un message pour informer du déroulement de l'opération
                if (operationEffectuee) {
                    JOptionPane.showMessageDialog(null, "Votre opérations a été effectuée, nouveau solde du  compte : " + c.getSolde());
                    jTextFieldMontant.setText("");
                    afficherCompte(client);
                } else {
                    JOptionPane.showMessageDialog(null, "Une erreur s'est produite lors de l'enregistrement de l'opération");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Aucun compte sélectionné");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Aucun compte sélectionné");
        }
    }

    /**
     * on affiche dans le tableau la liste de tous les comptes appartenant au
     * client sélectionné Pour cela on utilise le plugins AfficherCompte
     *
     * @param client Client
     */
    public void afficherCompte(Client client) {
        //Chargement du plugins à partir de sa description
        IAfficheur afficheur = (IAfficheur) Loader.getInstance().getPlugin(this.getListAfficheurPlugins().get(1));
        ArrayList<String> entete = afficheur.afficherEntete();

        //chargement des données du tableau
        DefaultTableModel tableModel = (DefaultTableModel) this.jTableCompte.getModel();
        tableModel.setRowCount(0);
        tableModel.setColumnIdentifiers(entete.toArray());
        ArrayList<String> compte;

        for (Compte list : client.getComptes()) {
            compte = afficheur.afficher(list);
            tableModel.addRow(compte.toArray());
        }
        jTableCompte.setModel(tableModel);
    }

    /**
     * On affiche la liste des clients de la banque dans un tableau
     * @param banque Banque
     */
    public void afficherClient(Banque banque) {
        IAfficheur afficheur = (IAfficheur) Loader.getInstance().getPlugin(this.getListAfficheurPlugins().get(0));

        ArrayList<String> entete = afficheur.afficherEntete();
        DefaultTableModel tableModel = (DefaultTableModel) this.jTableClient.getModel();
        tableModel.setRowCount(0);
        tableModel.setColumnIdentifiers(entete.toArray());
        ArrayList<String> unClient;
        for (Client c : banque.getClients()) {
            unClient = afficheur.afficher(c);
            tableModel.addRow(unClient.toArray());
        }
        jTableClient.setModel(tableModel);

    }

    /**
     * Pour le compte sélectionné, on affiche un nouvelle fenêtre contenant un
     * tableau qui listera les opérations associées à ce compte
     */
    public void afficherOperation() {
        if (jTableCompte.getSelectedRow() >= 0) {
            Compte c = this.getClient().chercherCompte(Integer.parseInt(jTableCompte.getValueAt(jTableCompte.getSelectedRow(), 0).toString()));
            if (c != null) {
                // on charge le plugns d'affichage à partir de sa description
                IAfficheur afficheur = (IAfficheur) Loader.getInstance().getPlugin(this.getListAfficheurPlugins().get(2));
                Client cl = c.getClient();
                // on rappelle les informations du client sur la fenêtre
                jLabelNomClient.setText("Client : " + cl.toString());
                jLabelNumCompte.setText("Compte : " + String.valueOf(c.getNumeroCompte()));

                // on charge la liste des opérations
                DefaultTableModel tableModel = (DefaultTableModel) jTableOperations.getModel();
                tableModel.setRowCount(0);
                ArrayList<String> entete = afficheur.afficherEntete();
                tableModel.setColumnIdentifiers(entete.toArray());
                ArrayList<String> operation;
                for (Operation o : c.getOperations()) {
                    operation = afficheur.afficher(o);
                    tableModel.addRow(operation.toArray());
                }
                jTableOperations.setModel(tableModel);
                jFrameOperations.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Aucun compte sélectionné");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Aucun compte sélectionné");
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameBanque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrameBanque j = new JFrameBanque();
                Banque banque = new Banque();
                Loader loader = Loader.getInstance();
                // on charge la liste des description de plugins liées à la contraite IAfficheur
                j.setListAfficheurPlugins(loader.getPluginsDescriptions(IAfficheur.class));
                //on charge la liste des descriptions de plugins liées à la contrainte IModifCompte
                j.setListModifieurPlugins(loader.getPluginsDescriptions(IModifCompte.class));
                //on affcihe les clients
                j.afficherClient(banque);
                // déclenchement d'un événement lors de la sélection d'un client dans la liste
                j.getjTableClient().getSelectionModel().addListSelectionListener(new ListSelectionListener() {

                    @Override
                    public void valueChanged(ListSelectionEvent e) {
                        j.setClient(banque.chercherClient(Integer.parseInt(
                                j.getjTableClient().getValueAt(j.getjTableClient().getSelectedRow(), 0).toString())));
                        // affichage des comptes du client dans le tableau
                        j.afficherCompte(j.getClient());

                    }
                });
                j.setLocationRelativeTo(null);
                j.setVisible(true);
            }
        });
    }

//-----------------------------------------------------------------------------------
// Ensemble des Getter / Setter
//-----------------------------------------------------------------------------------
    public Client getClient() {
        return client;
    }

    public void setClient(Client client) {
        this.client = client;
    }

    public ArrayList<IDescription> getListAfficheurPlugins() {
        return listAfficheurPlugins;
    }

    public void setListAfficheurPlugins(ArrayList<IDescription> listDescriptionPluging) {
        this.listAfficheurPlugins = listDescriptionPluging;
    }

    public ArrayList<IDescription> getListModifieurPlugins() {
        return listModifieurPlugins;
    }

    public void setListModifieurPlugins(ArrayList<IDescription> listModifieurPlugins) {
        this.listModifieurPlugins = listModifieurPlugins;
    }

    public JButton getjButtonOperations() {
        return jButtonOperations;
    }

    public void setjButtonOperations(JButton jButtonOperations) {
        this.jButtonOperations = jButtonOperations;
    }

    public JButton getjButtonRetour() {
        return jButtonRetour;
    }

    public void setjButtonRetour(JButton jButtonRetour) {
        this.jButtonRetour = jButtonRetour;
    }

    public JButton getjButtonValider() {
        return jButtonValider;
    }

    public void setjButtonValider(JButton jButtonValider) {
        this.jButtonValider = jButtonValider;
    }

    public JFrame getjFrameOperations() {
        return jFrameOperations;
    }

    public void setjFrameOperations(JFrame jFrameOperations) {
        this.jFrameOperations = jFrameOperations;
    }

    public JLabel getjLabelClient() {
        return jLabelClient;
    }

    public void setjLabelClient(JLabel jLabelClient) {
        this.jLabelClient = jLabelClient;
    }

    public JLabel getjLabelCompte() {
        return jLabelCompte;
    }

    public void setjLabelCompte(JLabel jLabelCompte) {
        this.jLabelCompte = jLabelCompte;
    }

    public JLabel getjLabelMontant() {
        return jLabelMontant;
    }

    public void setjLabelMontant(JLabel jLabelMontant) {
        this.jLabelMontant = jLabelMontant;
    }

    public JLabel getjLabelNomClient() {
        return jLabelNomClient;
    }

    public void setjLabelNomClient(JLabel jLabelNomClient) {
        this.jLabelNomClient = jLabelNomClient;
    }

    public JLabel getjLabelNumCompte() {
        return jLabelNumCompte;
    }

    public void setjLabelNumCompte(JLabel jLabelNumCompte) {
        this.jLabelNumCompte = jLabelNumCompte;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JScrollPane getjScrollPane2() {
        return jScrollPane2;
    }

    public void setjScrollPane2(JScrollPane jScrollPane2) {
        this.jScrollPane2 = jScrollPane2;
    }

    public JScrollPane getjScrollPane3() {
        return jScrollPane3;
    }

    public void setjScrollPane3(JScrollPane jScrollPane3) {
        this.jScrollPane3 = jScrollPane3;
    }

    public JTable getjTableClient() {
        return jTableClient;
    }

    public void setjTableClient(JTable jTableClient) {
        this.jTableClient = jTableClient;
    }

    public JTable getjTableCompte() {
        return jTableCompte;
    }

    public void setjTableCompte(JTable jTableCompte) {
        this.jTableCompte = jTableCompte;
    }

    public JTable getjTableOperations() {
        return jTableOperations;
    }

    public void setjTableOperations(JTable jTableOperations) {
        this.jTableOperations = jTableOperations;
    }

    public JTextField getjTextFieldMontant() {
        return jTextFieldMontant;
    }

    public void setjTextFieldMontant(JTextField jTextFieldMontant) {
        this.jTextFieldMontant = jTextFieldMontant;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOperations;
    private javax.swing.JButton jButtonRetour;
    private javax.swing.JButton jButtonValider;
    private javax.swing.JFrame jFrameOperations;
    private javax.swing.JLabel jLabelClient;
    private javax.swing.JLabel jLabelCompte;
    private javax.swing.JLabel jLabelMontant;
    private javax.swing.JLabel jLabelNomClient;
    private javax.swing.JLabel jLabelNumCompte;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableClient;
    private javax.swing.JTable jTableCompte;
    private javax.swing.JTable jTableOperations;
    private javax.swing.JTextField jTextFieldMontant;
    // End of variables declaration//GEN-END:variables
}
